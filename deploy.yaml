import:
  - recipe/symfony.php

config:
  application: 'globe-backend'
  repository: 'git@github.com:cschorr/symfony-core-kickstarter.git'
  git_tty: false
  keep_releases: 3
  
  # Docker configuration
  docker_compose_file: 'compose.yaml'
  docker_compose_project: 'globe-backend'
  
  # Symfony configuration
  bin/console: '{{bin/php}} bin/console'
  console_options: '--no-interaction'
  
  # Shared files and directories
  shared_files:
    - '.env.local'
    - 'config/jwt/private.pem'
    - 'config/jwt/public.pem'
  
  shared_dirs:
    - 'var/log'
    - 'var/sessions'
    - 'public/uploads'
  
  # Writeable directories
  writable_dirs:
    - 'var'
    - 'public/uploads'

hosts:
  stage:
    hostname: '157.90.166.119'
    remote_user: 'cschorr'
    deploy_path: '/var/www/globe'
    branch: 'main'

tasks:
  # Check that required shared files exist before deployment
  deploy:check:shared:
    - run: 'if [ ! -f {{deploy_path}}/shared/.env.local ]; then echo "ERROR: {{deploy_path}}/shared/.env.local not found. Please create it with production secrets."; exit 1; fi'
    - run: 'if [ ! -f {{deploy_path}}/shared/config/jwt/private.pem ]; then echo "WARNING: JWT keys not found. Generate them with: php bin/console lexik:jwt:generate-keypair"; fi'
  
  # Create necessary shared directories
  deploy:shared:dirs:
    - run: 'mkdir -p {{deploy_path}}/shared/config/jwt {{deploy_path}}/shared/var/log {{deploy_path}}/shared/var/sessions {{deploy_path}}/shared/public/uploads'
  
  # Build Docker image
  deploy:docker:build:
    - run: 'cd {{release_path}} && docker compose -f {{docker_compose_file}} build --no-cache'
  
  # Stop previous Docker containers
  deploy:docker:down:
    - run: 'if [ -L {{deploy_path}}/current ]; then cd {{deploy_path}}/current && docker compose -p {{docker_compose_project}} down || true; fi'
  
  # Start Docker containers with environment variables from .env.local
  deploy:docker:up:
    - run: 'cd {{release_path}} && docker compose -f {{docker_compose_file}} -p {{docker_compose_project}} --env-file .env.local up -d'
  
  # Wait for containers to be ready
  deploy:docker:wait:
    - run: 'sleep 5'
    - run: 'cd {{release_path}} && docker compose -p {{docker_compose_project}} exec -T php php -v'
  
  # Install vendors using Docker (after shared files are available)
  deploy:vendors:
    - run: 'cd {{release_path}} && docker compose -f {{docker_compose_file}} --env-file .env.local run --rm -T php composer install --no-dev --no-interaction --prefer-dist --optimize-autoloader'
  
  # Database migration
  deploy:database:migrate:
    - run: 'cd {{release_path}} && docker compose -p {{docker_compose_project}} exec -T php {{bin/console}} doctrine:migrations:migrate {{console_options}}'
  
  # Cache tasks
  deploy:cache:clear:
    - run: 'cd {{release_path}} && docker compose -p {{docker_compose_project}} exec -T php {{bin/console}} cache:clear {{console_options}}'
  
  deploy:cache:warmup:
    - run: 'cd {{release_path}} && docker compose -p {{docker_compose_project}} exec -T php {{bin/console}} cache:warmup {{console_options}}'
  
  # Health check
  deploy:health:check:
    - run: 'cd {{release_path}} && docker compose -p {{docker_compose_project}} ps'
    - run: 'cd {{release_path}} && docker compose -p {{docker_compose_project}} exec -T php php bin/console about'
  
  # Make bin files executable
  deploy:fix:permissions:
    - run: 'chmod +x {{release_path}}/bin/*'

# Hooks - Order is important!
before:
  # Before updating code, check shared files exist
  deploy:update_code:
    - deploy:check:shared
    - deploy:shared:dirs
  
  # Before switching symlink, stop old containers
  deploy:symlink:
    - deploy:docker:down

after:
  # After code is updated but before shared files are linked
  deploy:update_code:
    - deploy:fix:permissions
    - deploy:docker:build
  
  # After shared files are linked (critical for .env.local and JWT keys)
  deploy:shared:
    - deploy:vendors
  
  # After symlink is switched to new release
  deploy:symlink:
    - deploy:docker:up
    - deploy:docker:wait
    - deploy:cache:clear
    - deploy:cache:warmup
    - deploy:database:migrate
    - deploy:health:check
  
  # On deployment failure
  deploy:failed:
    - deploy:unlock
    - deploy:docker:down
